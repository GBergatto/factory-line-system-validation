sort
  Belt = struct input | reset | upgrade;
  Mode = struct normal | emergency;

map N: Nat -> Nat;
var a: Nat;
eqn N(a) = 2;


act
  alarm, unalarm, safeOutput, safeTrash, safeReset;
  safeBeltStart, safeBeltStop, unsafeBeltStop, safeBeltYield, safeBeltDeliver: Belt;

proc EmergencyHandler(m: Mode) =
  ((m == normal) -> alarm      . EmergencyHandler(emergency)) +
  ((m == normal) -> safeOutput . EmergencyHandler(m)) +
  ((m == normal) -> safeTrash  . EmergencyHandler(m)) +
  ((m == normal) -> safeReset  . EmergencyHandler(m)) +
  sum b:Belt . ((m == normal) -> safeBeltStop(b)    . EmergencyHandler(m)) +
  sum b:Belt . ((m == normal) -> safeBeltStart(b)   . EmergencyHandler(m)) +
  sum b:Belt . ((m == normal) -> safeBeltYield(b)   . EmergencyHandler(m)) +
  sum b:Belt . ((m == normal) -> safeBeltDeliver(b) . EmergencyHandler(m)) +
  ((m == emergency) -> unsafeBeltStop(input)
                       . unsafeBeltStop(upgrade)
                       . unsafeBeltStop(reset)
                       . unalarm
                       . EmergencyHandler(normal));


act
  deliverItem, pickFrom: Belt;

proc Arm(isHoldingItem: Bool) =
  (isHoldingItem)
    -> deliverItem(upgrade) . placeItem(upgrade) . sync1s . Arm(false)
    <> ((pickFrom(input) . sync2r) + (pickFrom(reset) . sync2r)) . Arm(true);


act
  start, stop, emergencyStop, receiveItem, yield, itemDetected: Belt;

proc ConveyorBelt(b: Belt, isMoving: Bool, hasItem: Bool, itemAtEnd: Bool) =
  emergencyStop(b) . emergencyStopBelt(b) . ConveyorBelt(b, false, hasItem, itemAtEnd) +
  ((!isMoving && !itemAtEnd)
    -> start(b) . startBelt(b) . ConveyorBelt(b, true, hasItem, itemAtEnd)) +
  ((isMoving)
    -> stop(b) . stopBelt(b) . ConveyorBelt(b, false, hasItem, itemAtEnd)) +
  ((!isMoving && !hasItem)
    -> receiveItem(b) . sync2s . ConveyorBelt(b, isMoving, true, itemAtEnd)) +
  ((!isMoving && itemAtEnd)
    -> yield(b) . pickItem(b) . sync1r . ConveyorBelt(b, isMoving, false, false)) +
  ((isMoving && hasItem && !itemAtEnd)
    -> itemDetected(b) . ConveyorBelt(b, isMoving, hasItem, true));


act
  acceptItem, trashItem, resetItem, itemOk, itemDefect;

proc Checker(n: Nat) =
  pickFrom(upgrade) . sync2r . itemOk . acceptItem . moveToOutput . Checker(1) +
  (n == N(0))
    -> pickFrom(upgrade) . sync2r . itemDefect . trashItem . moveToTrash . Checker(1)
    <> pickFrom(upgrade) . sync2r . itemDefect . resetItem . moveToReset . deliverItem(reset) . placeItem(reset) . sync1s . Checker(n + 1);


act
  moveToOutput, moveToTrash, moveToReset;
  sync_moveToOutput, sync_moveToTrash, sync_moveToReset;
  startBelt, stopBelt, emergencyStopBelt, pickItem, placeItem: Belt;
  sync_startBelt, sync_stopBelt, sync_emergencyStopBelt, sync_pickItem, sync_placeItem: Belt;
  sync1r, sync2r, syncr, sync1s, sync2s, syncs;

init
  hide
  (
    {
      sync_startBelt, sync_stopBelt, sync_emergencyStopBelt, sync_pickItem, sync_placeItem,
      sync_moveToOutput, sync_moveToTrash, sync_moveToReset,
      syncr, syncs
    },

    allow
    (
      {
        startBelt, stopBelt, emergencyStopBelt, pickItem, placeItem,
        sync_startBelt, sync_stopBelt, sync_emergencyStopBelt, sync_pickItem, sync_placeItem,
        moveToOutput, moveToTrash, moveToReset,
        sync_moveToOutput, sync_moveToTrash, sync_moveToReset,
        alarm, unalarm,
        itemDetected,
        itemOk, itemDefect,
        syncr, syncs
      },
      
      comm
      (
        {
          safeBeltStart | start -> sync_startBelt,
          safeBeltStop | stop -> sync_stopBelt,
          unsafeBeltStop | emergencyStop -> sync_emergencyStopBelt,
          safeBeltYield | yield | pickFrom -> sync_pickItem,
          safeBeltDeliver | deliverItem | receiveItem -> sync_placeItem,

          safeOutput | acceptItem -> sync_moveToOutput,
          safeTrash | trashItem -> sync_moveToTrash,
          safeReset | resetItem -> sync_moveToReset,

          sync1r | sync2r -> syncr,
          sync1s | sync2s -> syncs
        },
        ConveyorBelt(input, true, true, false) ||
        ConveyorBelt(reset, false, false, false) ||
        ConveyorBelt(upgrade, false, false, false) ||
        Arm(false) ||
        Checker(1) ||
        EmergencyHandler(normal)
      )
    )
  );